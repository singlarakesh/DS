package HacherBlocks;

import java.util.Scanner;

public class MinMoneyNeeded {
	public static void main(String[] args) {
		Scanner scr = new Scanner(System.in);
		int f = scr.nextInt();
		int w = scr.nextInt();
		int bagw[] = new int[w];
		for (int i = 0; i < bagw.length; i++) {
			bagw[i] = scr.nextInt();
		}
		calcMinMoneyNeeded(bagw, w);
	}

	private static void calcMinMoneyNeeded(int[] bagw, int w) {
		// TODO Auto-generated method stub
		int wt[] = new int[w];
		int price[] = bagw;
		for (int i = 0; i < w; i++) {
			wt[i] = i + 1;
			price[i] = bagw[i];
		}

		int capacity = w;
		int dp[][] = new int[wt.length + 1][capacity + 1];
		 // fill 0th row with infinity
        for (int i = 0; i <= wt.length; i++)
            dp[0][i] = Integer.MAX_VALUE;
      
        // fill 0'th column with 0
        for (int i = 1; i <= capacity; i++)
            dp[i][0] = 0;
      
		for (int i = 1; i <= wt.length; i++) {
			for (int j = 1; j <= capacity; j++) {
				if (wt[i - 1] <= j && price[i - 1] != -1) {
					dp[i][j] = Math.min(dp[i - 1][j], price[i - 1] + dp[i][j - wt[i - 1]]);
				} else {
					dp[i][j] = dp[i - 1][j];
				}

			}
		}
		System.out.print(dp[wt.length][capacity]);
		for (int i = 0; i <= wt.length; i++) {
			for (int j = 0; j <= capacity; j++) {
				System.out.print(dp[i][j] + " ");

			}
			System.out.println();
		}
	}
}
