
public class ArraysBasic {
	public static void main(String[] args) {
		int[][] ar = { { 1, 0, 9 }, { 1, 1, 1 }, { 1, 1, 1 } };
//		demolitionRobot(ar, 0, 0, ar.length-1, ar[0].length-1, "");
		boolean visited[][]=new boolean[ar.length][ar[0].length];
		System.out.println(demolitionRobot(ar, 0, 0, ar.length - 1, ar[0].length - 1, "",visited));
//		System.out.println(demolitionRobotDp(ar));
	}

	private static int demolitionRobotDp(int[][] ar) {
		// TODO Auto-generated method stub
		int dp[][] = new int[ar.length][ar[0].length];
		dp[ar.length - 1][ar[0].length - 1] = 0;
		for (int j = ar.length - 2; j >= 0; j--) {
			dp[j][ar.length - 1] = 1;
		}
		for (int j = ar.length - 2; j >= 0; j--) {
			dp[ar.length - 1][j] = 1;
		}
		for (int i = ar.length - 2; i >= 0; i--) {
			for (int j = ar[0].length - 2; j >= 0; j--) {
				dp[i][j] = dp[i + 1][j] + dp[i][j + 1];
			}
		}
		return dp[0][0];
	}

	private static int demolitionRobot(int[][] ar, int sr, int sc, int er, int ec, String ans, boolean[][] visited) {
		// TODO Auto-generated method stub
		if (sr < 0 || sc < 0)
			return Integer.MAX_VALUE;
		if (sr > er || sc > ec)
			return Integer.MAX_VALUE;
		if(visited[sr][sc]) {
			return Integer.MAX_VALUE;
		}
		if (ar[sr][sc] == 0) {
			return Integer.MAX_VALUE;
		}
		if (ar[sr][sc] == 9) {
			System.out.println(ans);
			return 0;
		}
		int res1 = demolitionRobot(ar, sr + 1, sc, er, ec, ans + "V",visited);
		int res2 = demolitionRobot(ar, sr, sc + 1, er, ec, ans + "H", visited);
		int res3 = demolitionRobot(ar, sr - 1, sc, er, ec, ans + "-V",visited);
		int res4 = demolitionRobot(ar, sr, sc - 1, er, ec, ans + "-H",visited);
		int res = Math.min(Math.min(res1, res2), Math.min(res3, res4));
		if (res != Integer.MAX_VALUE) {
			res += 1;
		}
		return res;
	}
	// memoization
//	private static int demolitionRobot(int[][] ar, int sr, int sc, int er, int ec, int dp[][]) {
//		// TODO Auto-generated method stub
//		if (sr == er && sc == ec) {
//			System.out.println(ans);
//			return 1;
//		}
//		if (sr > er || sc > ec)
//			return 0;
////		if (ar[sr][sc] == 0) {
////			return 0;
////		}
//		if(dp[][]) {
//			
//		}
//		int res1=demolitionRobot(ar, sr + 1, sc, er, ec, ans + "V");
//		int res2=demolitionRobot(ar, sr, sc + 1, er, ec, ans + "H");
//		dp[sr][sc]=res1+res2;
//		return res1+res2;
//	}
}
