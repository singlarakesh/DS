package dp;

public class CoinChange {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int coin[] = { 1, 2, 5 };
		int amt = 11;
		// recursion
//		System.out.println(minCoinNeeded(coin, 0, amt));
		// dp
		System.out.println(minCoinNeededDp(coin,amt));
	}

	private static char[] minCoinNeededDp(int[] coin, int amt) {
		// TODO Auto-generated method stub
		int [][]dp=new int[coin.length+1][amt+1];
		for(int i=0;i<dp.length;i++);
		
		
		return null;
	}

	public static int minCoinNeeded(int coin[], int i, int amt) {
		if (amt == 0) {
			return 0;
		}
		if (i >= coin.length)
			return Integer.MAX_VALUE;

		if (amt - coin[i] >= 0) {
			int x = minCoinNeeded(coin, i, amt - coin[i]);
			if (x != Integer.MAX_VALUE) {
				x += 1;
			}
			return Math.min(x, minCoinNeeded(coin, i + 1, amt));
		} else {

			return minCoinNeeded(coin, i + 1, amt);
		}
	}

}
