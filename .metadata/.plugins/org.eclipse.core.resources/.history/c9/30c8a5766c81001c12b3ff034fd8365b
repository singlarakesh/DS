package Graph;

import java.util.LinkedList;
import java.util.Queue;

public class FloodFill {
	class Pair {
		int x;
		int y;

		public Pair(int x, int y) {
			// TODO Auto-generated constructor stub
			this.x = x;
			this.y = y;
		}
	}

	public static void main(String[] args) {
		int images[][] = { { 1, 1, 1 }, { 1, 1, 0 }, { 1, 0, 1 } };
		int sr = 1, sc = 1;
		floodFill(images, sr, sc, 2);
	}

	public static int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
		int val = image[sr][sc];
		Pair p = new Pair(sr, sc);
		Queue<Pair> q = new LinkedList<>();
		q.add(p);
		int i[] = { -1, -1, -1, 0, 0, 1, 1, 1 };
		int j[] = { -1, 0, 1, -1, 1, -1, 0, 1 };
		boolean visited[][] = new boolean[image.length][image[0].length];
		while (!q.isEmpty()) {
			Pair pair = q.poll();
			int x = pair.x;
			int y = pair.y;
			image[x][sc] = newColor;
			for (int m = 0; m < 8; m++) {
				if (isValid(image, x + i[m], y + j[m], val, visited)) {
					q.add(new Pair(x + i[m], y + j[m]));
					visited[x + i[m]][y + j[m]] = true;
				}
			}

		}
		for (int t = 0; t < image.length; t++) {
			for (int k = 0; k < image[0].length; k++) {
				System.out.print(image[t][k]);
			}
			System.out.println();
		}
		return image;
	}

	public static boolean isValid(int[][] image, int i, int j, int val, boolean visited[][]) {
		if (i >= 0 && j >= 0 && i < image.length && j < image[0].length && image[i][j] == val && !visited[i][j]) {
			return true;
		}
		return false;
	}
}
